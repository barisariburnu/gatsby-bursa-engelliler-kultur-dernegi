{"version":3,"sources":["webpack:///./src/components/post-card-modern/post-card-modern.style.tsx","webpack:///./src/components/post-card-modern/post-card-modern.tsx","webpack:///./src/components/pagination/pagination.style.tsx","webpack:///./src/components/pagination/pagination.tsx","webpack:///./src/templates/blog-list.tsx"],"names":["PostCardModernWrapper","styled","div","PostPreview","PostDetails","PostDate","PostTitle","h2","themeGet","Excerpt","p","PostTags","PostCardModern","image","title","description","url","date","tags","className","imageType","placeholderBG","props","addAllClasses","push","join","to","fluid","alt","backgroundColor","fixed","dangerouslySetInnerHTML","__html","map","tag","index","key","defaultProps","PaginationWrapper","PrevPage","NextPage","PageNumber","Pagination","prevLink","nextLink","currentPage","totalPage","aria-label","BlogList","Posts","data","allMarkdownRemark","edges","pageContext","numPages","isFirst","isLast","prevPage","toString","nextPage","PrevLink","NextLink","node","placeholderColors","setColor","Math","floor","random","length","fields","slug","frontmatter","cover","childImageSharp","excerpt"],"mappings":"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","file":"component---src-templates-blog-list-tsx-7cbd1b501044721e29a9.js","sourcesContent":["import styled from 'styled-components';\nimport { themeGet } from '@styled-system/theme-get';\n\nexport const PostCardModernWrapper = styled.div`\n  position: relative;\n`;\n\nexport const PostPreview = styled.div`\n  margin-bottom: 30px;\n  position: relative;\n  min-height: 150px;\n  img {\n    border-radius: 3px;\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    width: 80%;\n    height: 80%;\n    background-color: #757575;\n    bottom: 0;\n    left: 10%;\n    filter: blur(15px);\n  }\n`;\n\nexport const PostDetails = styled.div``;\n\nexport const PostDate = styled.div`\n  position: absolute;\n  width: 75px;\n  height: 75px;\n  top: 30px;\n  left: 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  border-radius: 6px;\n  font-size: 30px;\n  font-weight: bold;\n  line-height: 1;\n  pointer-events: none;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.6);\n  > span {\n    font-size: 13px;\n    font-weight: normal;\n    line-height: 1;\n    margin-top: 3px;\n  }\n`;\n\nexport const PostTitle = styled.h2`\n  font-size: 21px;\n  font-weight: 700;\n  color: ${themeGet('colors.textColor', '#292929')};\n  line-height: 1.53;\n  margin-bottom: 10px;\n  font-family: ${themeGet('fontFamily.0')};\n  a {\n    color: ${themeGet('colors.textColor', '#292929')};\n  }\n  @media (max-width: 1200px) {\n    font-size: 20px;\n  }\n  @media (max-width: 990px) {\n    font-size: 19px;\n  }\n  @media (max-width: 575px) {\n    font-size: 18px;\n  }\n`;\n\nexport const Excerpt = styled.p`\n  font-size: ${themeGet('fontSizes.3', '15')}px;\n  color: ${themeGet('textColor', '#292929')};\n  font-weight: 400;\n  line-height: 2;\n  margin-bottom: 0;\n  @media (max-width: 990px) {\n    font-size: 14px;\n  }\n`;\n\nexport const PostTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-bottom: 15px;\n\n  a {\n    display: block;\n    margin-right: 30px;\n    font-size: 14px;\n    font-weight: 400;\n    color: ${themeGet('primary', '#D10068')};\n    @media (max-width: 990px) {\n      font-size: 13px;\n      margin-right: 25px;\n    }\n  }\n`;\n","import * as React from 'react';\nimport { Link } from 'gatsby';\nimport _ from 'lodash';\nimport Img from 'gatsby-image';\nimport {\n  PostCardModernWrapper,\n  PostPreview,\n  PostDetails,\n  PostDate,\n  PostTitle,\n  Excerpt,\n  PostTags,\n} from './post-card-modern.style';\n\ninterface PostCardModernProps {\n  image?: any;\n  title: string;\n  description?: string;\n  url: string;\n  date?: string;\n  tags?: [];\n  className?: string;\n  imageType?: 'fixed' | 'fluid';\n  placeholderBG?: string;\n}\n\nconst PostCardModern: React.FunctionComponent<PostCardModernProps> = ({\n  image,\n  title,\n  description,\n  url,\n  date,\n  tags,\n  className,\n  imageType,\n  placeholderBG,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = ['post_card_modern'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return (\n    <PostCardModernWrapper className={addAllClasses.join(' ')} {...props}>\n      {image == null ? null : (\n        <PostPreview className=\"post_preview\">\n          <Link to={url}>\n            {imageType === 'fluid' ? (\n              <Img\n                fluid={image}\n                alt=\"post preview\"\n                backgroundColor={placeholderBG}\n              />\n            ) : (\n              <Img\n                fixed={image}\n                alt=\"post preview\"\n                backgroundColor={placeholderBG}\n              />\n            )}\n          </Link>\n          {date && (\n            <PostDate\n              dangerouslySetInnerHTML={{\n                __html: date,\n              }}\n              className=\"post_date\"\n            />\n          )}\n        </PostPreview>\n      )}\n\n      <PostDetails className=\"post_details\">\n        {tags == null ? null : (\n          <PostTags className=\"post_tags\">\n            {tags.map((tag: string, index: number) => (\n              <Link key={index} to={`/etiket/${_.kebabCase(tag)}/`}>\n                {`#${tag}`}\n              </Link>\n            ))}\n          </PostTags>\n        )}\n        <PostTitle className=\"post_title\">\n          <Link to={url}>{title}</Link>\n        </PostTitle>\n        {description && (\n          <Excerpt\n            dangerouslySetInnerHTML={{\n              __html: description,\n            }}\n            className=\"excerpt\"\n          />\n        )}\n      </PostDetails>\n    </PostCardModernWrapper>\n  );\n};\n\nPostCardModern.defaultProps = {\n  imageType: 'fluid',\n};\n\nexport default PostCardModern;\n","import styled from 'styled-components';\nimport { themeGet } from '@styled-system/theme-get';\n\nexport const PaginationWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const PrevPage = styled.div`\n  min-width: 32px;\n  a {\n    width: 32px;\n    height: 32px;\n    color: ${themeGet('colors.textColor', '#292929')};\n    border-radius: 50%;\n    background-color: #f3f3f3;\n    font-size: 18px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: 0.15s ease-in-out;\n    svg {\n      display: block;\n    }\n    &:hover {\n      color: #fff;\n      background-color: ${themeGet('colors.primary', '#D10068')};\n    }\n  }\n`;\n\nexport const NextPage = styled.div`\n  min-width: 32px;\n  a {\n    width: 32px;\n    height: 32px;\n    color: ${themeGet('colors.textColor', '#292929')};\n    border-radius: 50%;\n    background-color: #f3f3f3;\n    font-size: 18px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: 0.15s ease-in-out;\n    svg {\n      display: block;\n    }\n    &:hover {\n      color: #fff;\n      background-color: ${themeGet('colors.primary', '#D10068')};\n    }\n  }\n`;\n\nexport const PageNumber = styled.div``;\n","import * as React from 'react';\nimport { Link } from 'gatsby';\nimport { IoMdArrowRoundBack, IoMdArrowRoundForward } from 'react-icons/io';\nimport {\n  PaginationWrapper,\n  PrevPage,\n  NextPage,\n  PageNumber,\n} from './pagination.style';\n\ntype PaginationProps = {\n  prevLink?: string | undefined | null | boolean;\n  nextLink?: string | undefined | null | boolean;\n  currentPage: string;\n  totalPage: string;\n  className?: string;\n};\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({\n  prevLink,\n  nextLink,\n  currentPage,\n  totalPage,\n  className,\n  ...props\n}) => {\n  return (\n    <PaginationWrapper {...props} className={className}>\n      <PrevPage>\n        {prevLink && (\n          <Link to={`${prevLink}`} aria-label=\"Önceki\">\n            <IoMdArrowRoundBack />\n          </Link>\n        )}\n      </PrevPage>\n\n      <PageNumber>{`${currentPage} / ${totalPage}`}</PageNumber>\n\n      <NextPage>\n        {nextLink && (\n          <Link to={`${nextLink}`} aria-label=\"Sonraki\">\n            <IoMdArrowRoundForward />\n          </Link>\n        )}\n      </NextPage>\n    </PaginationWrapper>\n  );\n};\n\nexport default Pagination;\n","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport PostCardModern from '../components/post-card-modern/post-card-modern';\nimport Pagination from '../components/pagination/pagination';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { BlogPostsWrapper, PostRow, PostGrid } from './templates.style';\n\nconst BlogList = (props: any) => {\n  const { data } = props;\n  const Posts = data.allMarkdownRemark.edges;\n  const { currentPage, numPages } = props.pageContext;\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage =\n    currentPage - 1 === 1 ? '/bizden-haberler/1' : `/bizden-haberler/${(currentPage - 1).toString()}`;\n  const nextPage = `/bizden-haberler/${(currentPage + 1).toString()}`;\n  const PrevLink = !isFirst && prevPage;\n  const NextLink = !isLast && nextPage;\n\n  return (\n    <Layout>\n      <SEO title={`Sayfa ${currentPage}`} />\n\n      <BlogPostsWrapper>\n        <PostRow>\n          {Posts.map(({ node }: any) => {\n            // Random Placeholder Color\n            const placeholderColors = [\n              '#55efc4',\n              '#81ecec',\n              '#74b9ff',\n              '#a29bfe',\n              '#ffeaa7',\n              '#fab1a0',\n              '#e17055',\n              '#0984e3',\n              '#badc58',\n              '#c7ecee',\n            ];\n            const setColor =\n              placeholderColors[\n              Math.floor(Math.random() * placeholderColors.length)\n              ];\n            return (\n              <PostGrid>\n                <PostCardModern\n                  key={node.fields.slug}\n                  title={node.frontmatter.title || node.fields.slug}\n                  image={\n                    node.frontmatter.cover == null\n                      ? null\n                      : node.frontmatter.cover.childImageSharp.fluid\n                  }\n                  url={node.fields.slug}\n                  description={node.frontmatter.description || node.excerpt}\n                  date={node.frontmatter.date}\n                  tags={node.frontmatter.tags}\n                  placeholderBG={setColor}\n                />\n              </PostGrid>\n            );\n          })}\n        </PostRow>\n        <Pagination\n          prevLink={PrevLink}\n          nextLink={NextLink}\n          currentPage={`${currentPage}`}\n          totalPage={`${numPages}`}\n        />\n      </BlogPostsWrapper>\n    </Layout>\n  );\n};\n\nexport default BlogList;\n\nexport const pageQuery = graphql`\n  query($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    sitePage {\n      path\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD [<span>] MMMM [</span>]\", locale: \"tr\")\n            title\n            description\n            tags\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 1170, quality: 90) {\n                  ...GatsbyImageSharpFluid_noBase64\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}